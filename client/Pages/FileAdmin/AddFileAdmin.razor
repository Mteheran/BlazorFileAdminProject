@using System.Text
@inject HttpClient api

<div class="panel">
<EditForm class="form" Model="model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="@nameof(model.Name)">@nameof(model.Name)</label>
        <InputText class="form-control" id="@nameof(model.Name)" @bind-Value="model.Name" />
        <ValidationMessage For="@(() => model.Name)" />
    </div>
    
    <div class="form-group">
        <label for="@nameof(model.Description)">@nameof(model.Description)</label>
        <InputText class="form-control" id="@nameof(model.Description)" @bind-Value="model.Description" />
        <ValidationMessage For="@(() => model.Description)" />
    </div>

    <div class="form-group">
        <label for="@nameof(model.FileName)">@nameof(model.FileName)</label>
        <InputFile class="form-control" id="@nameof(model.FileName)" OnChange="@OnInputFileChange"  />
        <span>@model.FileName</span>
        <ValidationMessage For="@(() => model.FileName)" />
    </div>

    <div class="form-group">
        <label for="@nameof(model.BlazorFileTypeId)">File Type</label>
       <InputSelect class="form-control" @bind-Value="model.BlazorFileTypeId">
       
       @if(FileTypes != null)
       {
            @foreach (var item in FileTypes)
            {
                <option value="@item.BlazorFileTypeId">@item.Name</option>            
            }
       }
       </InputSelect>
    </div>

    
    
    <button class="btn btn-success" type="submit">Save</button>
    <button class="btn btn-danger" @onclick="CloseModal">Close</button>
</EditForm>

</div>

@code
{
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    public BlazorFile model  {get;set;}
    public List<BlazorFileType> FileTypes {get;set;}

    [Parameter]
    public bool EditMode { get; set; }

    [Parameter]
    public BlazorFile currentModel { get; set; }

    public IBrowserFile FileSelected {get;set;}

    protected override async Task OnParametersSetAsync()
    {
        if(currentModel!= null) model = currentModel;        
    }
    protected override async Task OnInitializedAsync()
    {
        if(model== null) model = new BlazorFile();      

        FileTypes = await api.GetFromJsonAsync<List<BlazorFileType>>("BlazorFileType");
        
        if(!EditMode) model.BlazorFileTypeId = FileTypes[0].BlazorFileTypeId;
    }

    public async Task HandleValidSubmit()
    {
        
        BlazorFileModel fileModel = new BlazorFileModel();

        var stream  = FileSelected.OpenReadStream(100000000);
        MemoryStream ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        stream.Close();
        
        model.FileName = FileSelected.Name;
        fileModel.FileInfo = model;
        fileModel.FileData = ms.ToArray();

        var jsonData = System.Text.Json.JsonSerializer.Serialize(fileModel);
        StringContent sb = new StringContent(jsonData, Encoding.UTF8, "application/json");
        
        if(EditMode)
        {
             await api.PutAsync($"BlazorFile/{model.BlazorFileId}", sb);
        }
        else
        {
            await api.PostAsync("BlazorFile", sb);
        }
     
        await ModalInstance.CloseAsync();
    }

    public async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        FileSelected = e.File;
        currentModel.FileName = FileSelected.Name;

    }

    public async Task CloseModal()
    {
        await ModalInstance.CancelAsync();
    }

}