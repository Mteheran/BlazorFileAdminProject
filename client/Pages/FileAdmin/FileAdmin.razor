@page "/fileadmin" 
@inject NavigationManager nav
@inject HttpClient api
@inject IJSRuntime js

<h1>File Administrator</h1>

<div class="form-group">
<button class="btn btn-primary" @onclick="GotToAddFileAdmin">Add New File</button>
</div>

@if(BlazorFiles ==null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>File Name</th>
                <th>Date Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in BlazorFiles)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@item.FileName</td>
                    <td>@item.DateCreated</td>
                    <td>
                        <button class="btn" @onclick="()=> UpdateFile(item)">Update</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteFile(item.BlazorFileId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    [CascadingParameter] public IModalService Modal { get; set; }

    public List<BlazorFile> BlazorFiles {get;set;}

    protected override async Task OnInitializedAsync()
    {
       await GetBlazorFiles();
    }

    public async Task GotToAddFileAdmin()
    {
        var reference = Modal.Show<AddFileAdmin>("Add New File");

        var resultModal = await reference.Result;
        
        if(!resultModal.Cancelled) await GetBlazorFiles();
    }

    public async Task GetBlazorFiles()
    {
         BlazorFiles = await api.GetFromJsonAsync<List<BlazorFile>>("BlazorFile");
    }    

    public async Task UpdateFile(BlazorFile fileSelected)
    {
        ModalParameters parameters = new ModalParameters();

        parameters.Add("EditMode", true);
        parameters.Add("currentModel", fileSelected);
        
        var reference = Modal.Show<AddFileAdmin>("Edit File", parameters);

        var resultModal = await reference.Result;
    }

    public async Task DeleteFile(Guid id)
    {
        var result = await js.InvokeAsync<bool>("deleteConfirm");

        if(result)
        {
            await api.DeleteAsync($"BlazorFile/{id.ToString()}");
            await GetBlazorFiles();
        }
    }
}